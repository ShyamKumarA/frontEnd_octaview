{"version":3,"file":"static/js/3648.02507eeb.chunk.js","mappings":"kOAiGA,UA7EwB,WACtB,IAAMA,GAAWC,EAAAA,EAAAA,MAOXC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,MAAOF,EAAAA,KAAaE,MAAM,oBAAoBC,SAAS,qBACvDC,MAAOJ,EAAAA,KAAaG,SAAS,0BAE/B,OACE,iBAAKE,UAAU,WAAf,WACE,SAAC,IAAD,CAAQA,UAAU,qCAClB,SAAC,IAAD,CAASA,UAAU,iCACnB,SAAC,KAAD,CAAWC,OAAK,EAACD,UAAU,QAA3B,UACE,SAAC,KAAD,CAAKA,UAAU,kDAAf,UACE,UAAC,KAAD,CAAKE,GAAG,KAAKF,UAAU,iBAAvB,WACE,SAAC,IAAD,KACA,SAAC,KAAD,WACE,UAAC,KAAD,CAAUA,UAAU,UAApB,WACE,iBAAKA,UAAU,cAAf,WACE,gBAAKG,IAAKC,EAAMC,IAAI,SAASL,UAAU,iBAAiBM,MAAM,QAC9D,SAAC,KAAD,CAAWC,IAAI,KAAKP,UAAU,OAA9B,0BAIF,SAAC,KAAD,CACEQ,cA1BM,CACpBX,MAAO,GACPE,MAAO,IAyBOL,iBAAkBA,EAClBe,SAAU,SAACC,GAETC,MAAM,oBAAD,OAAqBC,KAAKC,UAAUH,EAAQ,KAAM,KACvDlB,EAAS,MAEXsB,OAAQ,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACN,UAAC,KAAD,CAAMhB,UAAU,OAAhB,WACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAOiB,QAAQ,OAAf,mBACA,SAAC,KAAD,CACEC,KAAK,OACLC,KAAK,OACLnB,UAAS,sBACPe,EAAOhB,OAASiB,EAAQjB,MAAQ,cAAgB,OAGpD,SAAC,KAAD,CAAcmB,KAAK,OAAOE,UAAU,MAAMpB,UAAU,yBAEtD,UAAC,KAAD,YACE,SAAC,KAAD,CAAOiB,QAAQ,QAAf,oBACA,SAAC,KAAD,CACEC,KAAK,QACLC,KAAK,OACLnB,UAAS,sBACPe,EAAOlB,OAASmB,EAAQnB,MAAQ,cAAgB,OAGpD,SAAC,KAAD,CAAcqB,KAAK,QAAQE,UAAU,MAAMpB,UAAU,yBAEvD,SAAC,KAAD,WACE,SAAC,KAAD,CAAQmB,KAAK,SAASE,MAAM,OAAOC,OAAK,EAACtB,UAAU,OAAnD","sources":["views/auth/RecoverPassword.js"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  Button,\r\n  Label,\r\n  FormGroup,\r\n  CardTitle,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n} from 'reactstrap';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport AuthLogo from '../../layouts/logo/AuthLogo';\r\nimport { ReactComponent as LeftBg } from '../../assets/images/bg/login-bgleft.svg';\r\nimport { ReactComponent as RightBg } from '../../assets/images/bg/login-bg-right.svg';\r\nimport img1 from '../../assets/images/users/user4.jpg';\r\n\r\nconst RecoverPassword = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const initialValues = {\r\n    email: '',\r\n    uname: '',\r\n  };\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    email: Yup.string().email('Email is invalid').required('Email is required'),\r\n    uname: Yup.string().required('Username is required'),\r\n  });\r\n  return (\r\n    <div className=\"loginBox\">\r\n      <LeftBg className=\"position-absolute left bottom-0\" />\r\n      <RightBg className=\"position-absolute end-0 top\" />\r\n      <Container fluid className=\"h-100\">\r\n        <Row className=\"justify-content-center align-items-center h-100\">\r\n          <Col lg=\"12\" className=\"loginContainer\">\r\n            <AuthLogo />\r\n            <Card>\r\n              <CardBody className=\"p-4 m-1\">\r\n                <div className=\"text-center\">\r\n                  <img src={img1} alt=\"avatar\" className=\"rounded-circle\" width=\"95\" />\r\n                  <CardTitle tag=\"h4\" className=\"mt-2\">\r\n                    John Deo\r\n                  </CardTitle>\r\n                </div>\r\n                <Formik\r\n                  initialValues={initialValues}\r\n                  validationSchema={validationSchema}\r\n                  onSubmit={(fields) => {\r\n                    // eslint-disable-next-line no-alert\r\n                    alert(`SUCCESS!! :-)\\n\\n${JSON.stringify(fields, null, 4)}`);\r\n                    navigate('/');\r\n                  }}\r\n                  render={({ errors, touched }) => (\r\n                    <Form className=\"mt-3\">\r\n                      <FormGroup>\r\n                        <Label htmlFor=\"name\">Name</Label>\r\n                        <Field\r\n                          name=\"name\"\r\n                          type=\"text\"\r\n                          className={`form-control${\r\n                            errors.uname && touched.uname ? ' is-invalid' : ''\r\n                          }`}\r\n                        />\r\n                        <ErrorMessage name=\"name\" component=\"div\" className=\"invalid-feedback\" />\r\n                      </FormGroup>\r\n                      <FormGroup>\r\n                        <Label htmlFor=\"email\">Email</Label>\r\n                        <Field\r\n                          name=\"email\"\r\n                          type=\"text\"\r\n                          className={`form-control${\r\n                            errors.email && touched.email ? ' is-invalid' : ''\r\n                          }`}\r\n                        />\r\n                        <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\r\n                      </FormGroup>\r\n                      <FormGroup>\r\n                        <Button type=\"submit\" color=\"info\" block className=\"me-2\">\r\n                          Reset\r\n                        </Button>\r\n                      </FormGroup>\r\n                    </Form>\r\n                  )}\r\n                />\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecoverPassword;\r\n"],"names":["navigate","useNavigate","validationSchema","Yup","shape","email","required","uname","className","fluid","lg","src","img1","alt","width","tag","initialValues","onSubmit","fields","alert","JSON","stringify","render","errors","touched","htmlFor","name","type","component","color","block"],"sourceRoot":""}
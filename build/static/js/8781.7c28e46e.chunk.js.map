{"version":3,"file":"static/js/8781.7c28e46e.chunk.js","mappings":"qKAiCA,IA5BkB,SAAC,GAAmC,IAAjCA,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAChC,EAA4BC,EAAAA,UAAe,GAA3C,eAAOC,EAAP,KAAeC,EAAf,KAMA,OACE,iBAAKC,UAAU,6DAAf,WACE,iBAAKA,UAAS,sDAAiDF,EAAS,eAAiB,IAAzF,WACE,SAAC,KAAD,CAAQE,UAAU,oCAAoCC,MAAM,SAA5D,UACE,cAAGD,UAAS,aAAQF,EAAS,OAAS,WAAaI,QARtC,WACnBH,GAAWD,SASP,SAAC,IAAD,CAAWK,MAAO,CAAEC,OAAQ,uBAA5B,SAAsDT,QAExD,iBAAKK,UAAU,YAAf,UACGJ,EACAE,GAAS,gBAAKE,UAAU,mBAAsB,W,8HCjBjDK,EAAW,CACf,CACEC,GAAI,WAEN,CACEA,GAAI,WAEN,CACEA,GAAI,UAEN,CACEA,GAAI,QAEN,CACEA,GAAI,YAoER,EAhEmB,WACjB,IAAMC,GAAcC,EAAAA,EAAAA,KAClB,SAACC,GAAD,OAAWA,EAAMC,aAAaC,MAAMF,EAAMC,aAAaE,aAAe,MAElEC,GAAKL,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,aAAaC,MAAMG,OAAS,KAE9DC,GAAWC,EAAAA,EAAAA,MAOjB,OACE,4BACE,gBAAKhB,UAAU,6BAAf,UACE,SAAC,KAAD,CAAQA,UAAU,0BAA0BiB,KAAK,KAAKf,QARzC,SAACgB,GAClBA,EAAEC,iBACFJ,GAASK,EAAAA,EAAAA,IAAQP,EAAI,cAAe,aAMhC,4BAIDN,IAAuC,IAAxBA,EAAYc,SAC1B,iBAAKrB,UAAU,MAAf,WACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAOsB,IAAI,SAASC,IAAI,KAAxB,wBAGA,SAAC,KAAD,CACEV,GAAG,SACHW,KAAK,SACLC,KAAK,WACLC,KAAK,IACLC,MAAOpB,EAAYqB,MACnBC,SAAU,SAACX,GAAD,OAAOH,GAASe,EAAAA,EAAAA,IAAWvB,EAAYM,GAAI,QAASK,EAAEa,OAAOJ,eAG3E,mBACA,+CACA,gBAAK3B,UAAU,eAAf,SACGK,EAAS2B,KAAI,SAACC,GAAD,OACZ,SAAC,KAAD,CACEhC,MAAOgC,EAAQ3B,GAEfW,KAAK,KACLf,QAAS,kBAAMa,GAASe,EAAAA,EAAAA,IAAWvB,EAAYM,GAAI,QAAjB,UAA6BoB,EAAQ3B,OAJzE,SAMGC,EAAYN,QAAUgC,EAAQ3B,IAC7B,cAAGN,UAAU,iBAEb,cAAGA,UAAU,kBAPViC,EAAQ3B,aAcrB,iBAAKN,UAAU,wEAAf,WACE,cAAGA,UAAU,yBACb,eAAIA,UAAU,OAAd,sD,UCnDV,EAzBqB,SAAC,GAAD,IAAGE,EAAH,EAAGA,QAASW,EAAZ,EAAYA,GAAIqB,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,UAAWC,EAAnC,EAAmCA,UAAWC,EAA9C,EAA8CA,UAAWC,EAAzD,EAAyDA,cAAzD,OACnB,SAAC,KAAD,CAAStC,UAAS,uCAAkCkC,IAAWrB,EAAK,WAAa,IAAjF,UACE,iBAAKX,QAASA,EAASF,UAAS,2CAAsCoC,GAAtE,WACE,eAAIpC,UAAU,yBAAd,SAAwCmC,KACxC,iBAAKnC,UAAU,SAAf,WACE,2BAAQqC,KACR,SAAC,KAAD,CAAqBE,UAAU,MAAMR,OAAO,SAA5C,qBAGA,cAAG7B,QAASoC,EAAetC,UAAU,sBAAsBa,GAAG,oBCsCtE,EA7CiB,WACf,IAAME,GAAWC,EAAAA,EAAAA,OACjBwB,EAAAA,EAAAA,YAAU,WACRzB,GAAS0B,EAAAA,EAAAA,SACR,CAAC1B,IAEJ,IAUMJ,GAAQH,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAVN,SAACE,EAAO+B,GAC1B,MAAmB,KAAfA,EACK/B,EAAMgC,QACX,SAACC,GAAD,OACGA,EAAEvB,SACHuB,EAAEhB,MAAMiB,oBAAoBC,OAAO,KAAKC,SAASL,EAAWG,wBAE3DlC,EAAMgC,QAAO,SAACC,GAAD,OAAQA,EAAEvB,WAI9B2B,CAAYvC,EAAMC,aAAaC,MAAOF,EAAMC,aAAagC,eAErDR,GAAS1B,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,aAAaE,gBAEzD,OACE,SAAC,KAAD,UACGD,GAASA,EAAMG,OACZH,EAAMqB,KAAI,SAACiB,GAAD,OACR,SAAC,GAAD,kBAEMA,GAFN,IAGEf,OAAQA,EACRhC,QAAS,kBAAMa,GAASmC,EAAAA,EAAAA,IAAWD,EAAKpC,MACxCyB,cAAe,kBAAMvB,GAASoC,EAAAA,EAAAA,IAAWF,EAAKpC,MAC9CsB,UAAWc,EAAKrB,MAChBQ,UAAWa,EAAKhD,MAChBoC,UAAW,IAAIe,KAAKH,EAAKI,OAAOC,mBAAmB,CACjDC,QAAS,QACTC,KAAM,UACNC,MAAO,YAVJR,EAAKpC,OAcd,cCjBV,EAxBmB,WACjB,IAAM6C,GAAalD,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,aAAagC,cAEvD3B,GAAWC,EAAAA,EAAAA,MAEjB,OACE,gBAAKhB,UAAU,oBAAf,UACE,SAAC,KAAD,WACE,gBAAKA,UAAU,kCAAf,UACE,SAAC,KAAD,CACEA,UAAU,eACVa,GAAG,aACHW,KAAK,aACLC,KAAK,OACLI,SAAU,SAACX,GAAD,OAAOH,GAAS4C,EAAAA,EAAAA,IAAYzC,EAAEa,OAAOJ,SAC/CA,MAAO+B,EACPE,YAAY,2B,UCMxB,EApBc,WACZ,OACE,+BACE,SAAC,KAAD,WACE,SAAC,KAAD,WACE,SAACC,EAAA,EAAD,CACElE,aACE,iCACE,SAAC,EAAD,KACA,SAAC,EAAD,OAGJC,cAAc,SAAC,EAAD","sources":["components/twoColumn/TwoColumn.js","components/apps/notes/NoteDetail.js","components/apps/notes/NoteListItem.js","components/apps/notes/NoteList.js","components/apps/notes/NoteSearch.js","views/apps/notes/Notes.js"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'reactstrap';\r\nimport SimpleBar from 'simplebar-react';\r\n\r\nconst TwoColumn = ({ leftContent, rightContent }) => {\r\n  const [isOpen, setIsOpen] = React.useState(false);\r\n\r\n  const handleSubmit = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-lg-flex d-md-block border position-relative leftRightBox\">\r\n      <div className={`leftPart flex-shrink-0  bg-white border-end ${isOpen ? 'showLeftPart' : ''}`}>\r\n        <Button className=\"d-lg-none d-md-block openCloseBtn\" color=\"danger\">\r\n          <i className={`bi ${isOpen ? 'bi-x' : 'bi-list'}`} onClick={handleSubmit} />\r\n        </Button>\r\n        <SimpleBar style={{ height: 'calc(100vh - 200px)' }}>{leftContent}</SimpleBar>\r\n      </div>\r\n      <div className=\"rightPart\">\r\n        {rightContent}\r\n        {isOpen ? <div className=\"contentOverlay\" /> : ''}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nTwoColumn.propTypes = {\r\n  leftContent: PropTypes.node,\r\n  rightContent: PropTypes.node,\r\n};\r\n\r\nexport default TwoColumn;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Input, FormGroup, Button, Label } from 'reactstrap';\r\nimport { UpdateNote, addNote } from '../../../store/apps/notes/NotesSlice';\r\n\r\nconst colorsBg = [\r\n  {\r\n    bg: 'primary',\r\n  },\r\n  {\r\n    bg: 'success',\r\n  },\r\n  {\r\n    bg: 'danger',\r\n  },\r\n  {\r\n    bg: 'info',\r\n  },\r\n  {\r\n    bg: 'warning',\r\n  },\r\n];\r\n\r\nconst NoteDetail = () => {\r\n  const noteDetails = useSelector(\r\n    (state) => state.notesReducer.notes[state.notesReducer.notesContent - 1],\r\n  );\r\n  const id = useSelector((state) => state.notesReducer.notes.length + 1);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleNote = (e) => {\r\n    e.preventDefault();\r\n    dispatch(addNote(id, 'dummy Title', 'primary'));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"border-bottom p-3 text-end\">\r\n        <Button className=\"btn btn-success ms-auto\" size=\"sm\" onClick={handleNote}>\r\n          Add New Note\r\n        </Button>\r\n      </div>\r\n      {noteDetails && noteDetails.deleted === false ? (\r\n        <div className=\"p-4\">\r\n          <FormGroup>\r\n            <Label for=\"title1\" tag=\"h5\">\r\n              Edit Note\r\n            </Label>\r\n            <Input\r\n              id=\"title1\"\r\n              name=\"title1\"\r\n              type=\"textarea\"\r\n              rows=\"5\"\r\n              value={noteDetails.title}\r\n              onChange={(e) => dispatch(UpdateNote(noteDetails.id, 'title', e.target.value))}\r\n            />\r\n          </FormGroup>\r\n          <br />\r\n          <h5>Change Note color</h5>\r\n          <div className=\"button-group\">\r\n            {colorsBg.map((colorbg) => (\r\n              <Button\r\n                color={colorbg.bg}\r\n                key={colorbg.bg}\r\n                size=\"sm\"\r\n                onClick={() => dispatch(UpdateNote(noteDetails.id, 'color', `${colorbg.bg}`))}\r\n              >\r\n                {noteDetails.color === colorbg.bg ? (\r\n                  <i className=\"bi bi-check\" />\r\n                ) : (\r\n                  <i className=\"bi bi-circle\" />\r\n                )}\r\n              </Button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"d-flex mt-3 p-4 flex-column align-items-center justify-content-center\">\r\n          <i className=\"ti-agenda display-5\" />\r\n          <h4 className=\"mt-2\">Please select a Note or Add Note.</h4>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteDetail;\r\n","import React from 'react';\r\nimport { NavItem, UncontrolledTooltip } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst NoteListItem = ({ onClick, id, active, noteTitle, noteColor, noteDatef, onDeleteClick }) => (\r\n  <NavItem className={`border-bottom cursor-pointer ${active === id ? 'bg-light' : ''}`}>\r\n    <div onClick={onClick} className={`border-start p-3 border-4 border-${noteColor}`}>\r\n      <h5 className=\"text-truncate noteText\">{noteTitle}</h5>\r\n      <div className=\"d-flex\">\r\n        <small>{noteDatef}</small>\r\n        <UncontrolledTooltip placement=\"top\" target=\"delete\">\r\n          Delete\r\n        </UncontrolledTooltip>\r\n        <i onClick={onDeleteClick} className=\"bi bi-trash ms-auto\" id=\"delete\" />\r\n      </div>\r\n    </div>\r\n  </NavItem>\r\n);\r\n\r\nNoteListItem.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n  noteTitle: PropTypes.string.isRequired,\r\n  noteDatef: PropTypes.string.isRequired,\r\n  noteColor: PropTypes.string.isRequired,\r\n  id: PropTypes.number,\r\n  active: PropTypes.any,\r\n  onDeleteClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default NoteListItem;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Nav } from 'reactstrap';\r\nimport NoteListItem from './NoteListItem';\r\nimport { fetchNotes, SelectNote, DeleteNote } from '../../../store/apps/notes/NotesSlice';\r\n\r\nconst NoteList = () => {\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(fetchNotes());\r\n  }, [dispatch]);\r\n\r\n  const filterNotes = (notes, noteSearch) => {\r\n    if (noteSearch !== '')\r\n      return notes.filter(\r\n        (t) =>\r\n          !t.deleted &&\r\n          t.title.toLocaleLowerCase().concat(' ').includes(noteSearch.toLocaleLowerCase()),\r\n      );\r\n    return notes.filter((t) => !t.deleted);\r\n  };\r\n\r\n  const notes = useSelector((state) =>\r\n    filterNotes(state.notesReducer.notes, state.notesReducer.noteSearch),\r\n  );\r\n  const active = useSelector((state) => state.notesReducer.notesContent);\r\n\r\n  return (\r\n    <Nav>\r\n      {notes && notes.length\r\n        ? notes.map((note) => (\r\n            <NoteListItem\r\n              key={note.id}\r\n              {...note}\r\n              active={active}\r\n              onClick={() => dispatch(SelectNote(note.id))}\r\n              onDeleteClick={() => dispatch(DeleteNote(note.id))}\r\n              noteTitle={note.title}\r\n              noteColor={note.color}\r\n              noteDatef={new Date(note.datef).toLocaleDateString({\r\n                weekday: 'short',\r\n                year: 'numeric',\r\n                month: 'short',\r\n              })}\r\n            />\r\n          ))\r\n        : 'no notes'}\r\n    </Nav>\r\n  );\r\n};\r\n\r\nexport default NoteList;\r\n","import React from 'react';\r\nimport { Form, Input } from 'reactstrap';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { SearchNotes } from '../../../store/apps/notes/NotesSlice';\r\n\r\nconst NoteSearch = () => {\r\n  const searchTerm = useSelector((state) => state.notesReducer.noteSearch);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"p-3 border-bottom\">\r\n      <Form>\r\n        <div className=\"position-relative has-icon-left\">\r\n          <Input\r\n            className=\"form-control\"\r\n            id=\"searchNote\"\r\n            name=\"searchNote\"\r\n            type=\"text\"\r\n            onChange={(e) => dispatch(SearchNotes(e.target.value))}\r\n            value={searchTerm}\r\n            placeholder=\"Search Notes...\"\r\n          />\r\n        </div>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteSearch;\r\n","import { Card, CardBody } from 'reactstrap';\r\nimport NoteDetail from '../../../components/apps/notes/NoteDetail';\r\nimport NoteList from '../../../components/apps/notes/NoteList';\r\nimport NoteSearch from '../../../components/apps/notes/NoteSearch';\r\nimport TwoColumn from '../../../components/twoColumn/TwoColumn';\r\nimport './notes.scss';\r\n\r\nconst Notes = () => {\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardBody>\r\n          <TwoColumn\r\n            leftContent={\r\n              <>\r\n                <NoteSearch />\r\n                <NoteList />\r\n              </>\r\n            }\r\n            rightContent={<NoteDetail />}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Notes;\r\n"],"names":["leftContent","rightContent","React","isOpen","setIsOpen","className","color","onClick","style","height","colorsBg","bg","noteDetails","useSelector","state","notesReducer","notes","notesContent","id","length","dispatch","useDispatch","size","e","preventDefault","addNote","deleted","for","tag","name","type","rows","value","title","onChange","UpdateNote","target","map","colorbg","active","noteTitle","noteColor","noteDatef","onDeleteClick","placement","useEffect","fetchNotes","noteSearch","filter","t","toLocaleLowerCase","concat","includes","filterNotes","note","SelectNote","DeleteNote","Date","datef","toLocaleDateString","weekday","year","month","searchTerm","SearchNotes","placeholder","TwoColumn"],"sourceRoot":""}